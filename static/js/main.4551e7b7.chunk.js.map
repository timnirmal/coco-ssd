{"version":3,"sources":["drawReact.js","App.js","reportWebVitals.js","index.js"],"names":["drawRect","obj","ctx","forEach","prediction","x","y","width","height","text","score","console","log","toFixed","color","Math","floor","toString","strokeStyle","font","beginPath","fillStyle","lineWidth","fillText","strokeRect","App","webcamRef","useRef","canvasRef","detectObj","net","a","current","video","readyState","videoWidth","videoHeight","detect","getContext","runCoco","cocossd","setInterval","useEffect","className","ref","muted","style","position","marginLeft","marginRight","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mZAAaA,EAAW,SAACC,EAAKC,GAE1BD,EAAIE,SAAS,SAAAC,GAAc,kBAGOA,EAAU,KAHjB,GAGhBC,EAHgB,KAGbC,EAHa,KAGVC,EAHU,KAGHC,EAHG,KAIjBC,EAAOL,EAAU,MACjBM,EAAQN,EAAU,MAGxBO,QAAQC,IAAIH,EAAM,KAAuB,IAAjBC,EAAMG,QAAQ,GAAS,KAG/C,IAAMC,EAAQC,KAAKC,MAAY,KAANN,GAAgBO,SAAS,IAClDf,EAAIgB,YAAc,IAAMJ,EACxBZ,EAAIiB,KAAO,aAGXjB,EAAIkB,YACJlB,EAAImB,UAAY,IAAMP,EACtBZ,EAAIoB,UAAY,IAChBpB,EAAIqB,SAASd,EAAMJ,EAAGC,EAAE,IACxBJ,EAAIsB,WAAWnB,EAAGC,EAAGC,EAAOC,O,QCgDrBiB,MA9Df,WACI,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAEnBE,EAAS,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,yDAEmB,qBAAtBL,EAAUM,SACK,OAAtBN,EAAUM,SAC6B,IAAvCN,EAAUM,QAAQC,MAAMC,WAJd,uBAOVN,EAAUI,QAAQzB,MAAQmB,EAAUM,QAAQC,MAAME,WAClDP,EAAUI,QAAQxB,OAASkB,EAAUM,QAAQC,MAAMG,YARzC,SAWQN,EAAIO,OAAOX,EAAUM,QAAQC,MAAM,EAAE,IAX7C,OAWJhC,EAXI,OAcJC,EAAM0B,EAAUI,QAAQM,WAAW,MACzCtC,EAASC,EAAKC,GAfJ,2CAAH,sDAmBTqC,EAAO,uCAAG,4BAAAR,EAAA,sEACMS,SADN,OACNV,EADM,OAEZnB,QAAQC,IAAI,iBACZ6B,aAAa,kBAAKZ,EAAUC,KAAK,IAHrB,2CAAH,qDAQb,OAFAY,qBAAU,WAAMH,MAAY,IAGxB,qBAAKI,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,4CAEI,cAAC,IAAD,CACIC,IAAKlB,EACLmB,OAAO,EACPC,MAAO,CACHC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,UAAW,SACX3C,MAAO,OACPC,OAAO,UAIf,wBACIoC,IAAKhB,EACLkB,MAAO,CACHC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,UAAW,kBClDpBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4551e7b7.chunk.js","sourcesContent":["export const drawRect = (obj, ctx) =>{\n    // Loop through each prediction\n    obj.forEach( prediction => {\n\n        // Extract boxes and classes\n        const [x, y, width, height] = prediction[\"bbox\"];\n        const text = prediction[\"class\"];\n        const score = prediction[\"score\"];\n\n        //Class & Score\n        console.log(text +\"  \"+ score.toFixed(4)*100 + \"%\");\n\n        // Set styling\n        const color = Math.floor(score*16000000).toString(16);\n        ctx.strokeStyle = '#' + color\n        ctx.font = '18px Arial';\n\n        // Draw rectangles and text\n        ctx.beginPath();\n        ctx.fillStyle = '#' + color\n        ctx.lineWidth = 1.5;\n        ctx.fillText(text, x, y-10);\n        ctx.strokeRect(x, y, width, height);\n    });\n}","//Dependencies\nimport React, {useEffect, useRef} from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\nimport Webcam from \"react-webcam\";\nimport './App.css';\nimport {drawRect} from \"./drawReact\";\n\nfunction App() {\n    const webcamRef = useRef(null);\n    const canvasRef = useRef(null);\n\n    const detectObj = async (net) => {\n        // Check data is available\n        if (typeof webcamRef.current !== \"undefined\" &&\n            webcamRef.current !== null &&\n            webcamRef.current.video.readyState === 4)\n        {\n            // Set canvas height and width\n            canvasRef.current.width = webcamRef.current.video.videoWidth;\n            canvasRef.current.height = webcamRef.current.video.videoHeight;\n\n            // Make Detections\n            const obj = await net.detect(webcamRef.current.video,1,0.9);\n\n            // Draw Rect\n            const ctx = canvasRef.current.getContext(\"2d\");\n            drawRect(obj, ctx);\n        }\n    };\n\n    const runCoco = async () => {\n        const net = await cocossd.load();\n        console.log(\"Model loaded.\");\n        setInterval( ()=> detectObj(net),10)\n    };\n\n    useEffect(()=>{ runCoco() },[]);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                Model is Loading please wait...\n                <Webcam\n                    ref={webcamRef}\n                    muted={true}\n                    style={{\n                        position: \"absolute\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        textAlign: \"center\",\n                        width: \"auto\",\n                        height:\"auto\",\n                    }}\n                />\n\n                <canvas\n                    ref={canvasRef}\n                    style={{\n                        position: \"absolute\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        textAlign: \"center\"\n                    }}\n                />\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}